#!/usr/bin/env python
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

# Ugly implementation of some routines used to generate SimpleDB
# databases from other spatial databases.

#header{
#include "spatialdata/spatialdb/SpatialDB.hh"
#include "spatialdata/spatialdb/SimpleDB.hh"
#include "spatialdata/spatialdb/SimpleDBTypes.hh"
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)


cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef void deleteArray(void* p):
  """Deallocate C array."""
  free(p);
  return


cdef extern from "stdlib.h":
    ctypedef unsigned long size_t
    void* malloc(size_t size)
    void free(void* mem)



# ----------------------------------------------------------------------
def create(coords, locCount, locDim, numValues, topology):
  """Create structure for simple database."""
  # create C++ shim
  #embed{ void GenSimpleDB_tearDownData(void* pDataObj)
  spatialdata::spatialdb::SimpleDB::DataStruct* pData =
  (spatialdata::spatialdb::SimpleDB::DataStruct*) pDataObj;
  if (0 != pData) {
    delete[] pData->data;
    delete[] pData->valNames;
    delete[] pData->valUnits;
    } // if
  delete pData;
  #}embed
  
  # create C++ shim
  #embed{ void* GenSimpleDB_create(void* pCoordsObj, int locCount, int locDim, int numValues, char* topology)
  spatialdata::spatialdb::SimpleDB::DataStruct* pData =
  new spatialdata::spatialdb::SimpleDB::DataStruct;
  const int totalNumValues = locDim + numValues;
  const int size = locCount * totalNumValues;
  if (size > 0) {
    pData->data = new double[size];
    std::fill(pData->data, pData->data+size, 0.0);
    pData->numLocs = locCount;
    pData->numVals = numValues;
    pData->valNames = (numValues > 0) ? new std::string[numValues] : 0;
    pData->valUnits = (numValues > 0) ? new std::string[numValues] : 0;
    if (0 == strcasecmp("point", topology))
      pData->topology = spatialdata::spatialdb::SimpleDB::POINT;
    else if (0 == strcasecmp("line", topology))
      pData->topology = spatialdata::spatialdb::SimpleDB::LINE;
    else if (0 == strcasecmp("area", topology))
      pData->topology = spatialdata::spatialdb::SimpleDB::AREA;
    else if (0 == strcasecmp("volume", topology))
      pData->topology = spatialdata::spatialdb::SimpleDB::VOLUME;
  } // if
  double* pCoords = (double*) pCoordsObj;
  for (int iLoc=0; iLoc < locCount; ++iLoc) {
    double* pDataCoords = 
    spatialdata::spatialdb::SimpleDBTypes::dataCoords(*pData, iLoc);
    for (int iDim=0; iDim < locDim; ++iDim)
    pDataCoords[iDim] = pCoords[locDim*iLoc+iDim];
  } // for
  return (void*) pData;
  #}embed

  if not (topology == "point" or
          topology == "line" or
          topology == "area" or
          topology == "volume"):
    raise ValueError, "Argument 'topology' must be 'point', 'line', " \
          "'area', or 'volume'."
          
  cdef void* pCoordsObj
  pCoordsObj = PyCObject_AsVoidPtr(coords)

  return PyCObject_FromVoidPtr(
    GenSimpleDB_create(pCoordsObj, locCount, locDim, numValues, topology),
    GenSimpleDB_tearDownData)


def createValue(count):
  """Create array of values, initialized to 0."""
  cdef double* pVals
  if count < 1:
    raise ValueError, "Argument 'count' must be positive."
  pVals = <double*> malloc(count*sizeof(double))
  for i from 0 <= i < count:
    pVals[i] = 0.0
  return PyCObject_FromVoidPtr(pVals, deleteArray)


def setValue(data, dataIndex, value, locCount, name, units):
  """Set database value using array of values."""
  # create C++ shim
  #embed{ void GenSimpleDB_setValue(void* pDataObj, int dataIndex, void* pValueObj, int locCount, char* name, char* units)
  spatialdata::spatialdb::SimpleDB::DataStruct* pData =
  (spatialdata::spatialdb::SimpleDB::DataStruct*) pDataObj;
  double* pValue = (double*) pValueObj;
  
  for (int iLoc=0; iLoc < locCount; ++iLoc) {
    double* pDataVals = 
    spatialdata::spatialdb::SimpleDBTypes::dataVals(*pData, iLoc);
    pDataVals[dataIndex] = pValue[iLoc];
  } // for
  pData->valNames[dataIndex] = name;
  pData->valUnits[dataIndex] = units;
  #}embed

  cdef void* pDataObj
  cdef void* pValueObj

  pDataObj = PyCObject_AsVoidPtr(data)
  pValueObj = PyCObject_AsVoidPtr(value)

  GenSimpleDB_setValue(pDataObj, dataIndex, pValueObj, locCount, name, units)
  return


def applyFilter(value, valueCount, locs, locCount, cs, db,
                operand, defaultValue):
  """Apply filter to value."""
  # create C++ shim
  #embed{ void GenSimpleDB_applyFilter(void* pValueObj, int valueCount, void* pLocsObj, int locCount, void* pCSObj, void* pDBObj, char* operand, double defaultValue)
  
  double* pValue = (double*) pValueObj;
  double* pLocs = (double*) pLocsObj;
  spatialdata::spatialdb::SpatialDB* pDB =
    (spatialdata::spatialdb::SpatialDB*) pDBObj;
  spatialdata::geocoords::CoordSys* pCS =
    (spatialdata::geocoords::CoordSys*) pCSObj;
    
  double* pFilterData = (locCount > 0) ? new double[locCount] : 0;
  double val = 0;
  int err = 0;
  for (int iLoc=0, index=0; iLoc < locCount; ++iLoc, index += 3) {
    err = pDB->query(&val, 1, 
                     pLocs[index], pLocs[index+1], pLocs[index+2],
                     pCS);
    if (0 != err)
      val = defaultValue;
    pFilterData[iLoc] = val;
  } // for
  if (0 == strcasecmp("add", operand))
    for (int iLoc=0; iLoc < locCount; ++iLoc)
      pValue[iLoc] += pFilterData[iLoc];
  else if (0 == strcasecmp("subtract", operand))
    for (int iLoc=0; iLoc < locCount; ++iLoc)
      pValue[iLoc] -= pFilterData[iLoc];
  else if (0 == strcasecmp("multiply", operand))
    for (int iLoc=0; iLoc < locCount; ++iLoc)
      pValue[iLoc] *= pFilterData[iLoc];
  else if (0 == strcasecmp("divide", operand))
    for (int iLoc=0; iLoc < locCount; ++iLoc)
      pValue[iLoc] /= pFilterData[iLoc];
  delete[] pFilterData; pFilterData = 0;
  #}embed

  if not cs.name == "spatialdata_geocoords_CoordSys":
    raise TypeError, \
          "Arguement 'cs' must be an extensional module type 'CoordSys'."
  if not db.name == "spatialdata_spatialdb_SpatialDB":
    raise TypeError, \
          "Argument 'db' must be an extension module type 'SpatialDB'."
  if not (operand == "add" or
          operand == "subtract" or
          operand == "multiply" or
          operand == "divide"):
    raise ValueError, "Arguement operand must be 'add', 'subtract', " \
          "'multiply', or 'divide'."
  
  cdef void* pValueObj
  cdef void* pLocsObj
  
  pValueObj = PyCObject_AsVoidPtr(value)
  pLocsObj = PyCObject_AsVoidPtr(locs)
  GenSimpleDB_applyFilter(pValueObj, valueCount, pLocsObj, locCount,
                          ptrFromHandle(cs), ptrFromHandle(db),
                          operand, defaultValue)
  return
  

# version
__id__ = "$Id$"

# End of file 

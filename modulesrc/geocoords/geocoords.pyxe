#!/usr/bin/env python
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================
#

#header{
#include "spatialdata/geocoords/CoordSys.hh"
#include "spatialdata/geocoords/CSCart.hh"
#include "spatialdata/geocoords/CSGeo.hh"
#include "spatialdata/geocoords/CSGeoLocalCart.hh"
#include "spatialdata/geocoords/CSGeoProj.hh"
#include "spatialdata/geocoords/Projector.hh"
#include "spatialdata/geocoords/Converter.hh"
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
    ctypedef unsigned long size_t
    void* malloc(size_t size)
    void free(void* mem)

# ----------------------------------------------------------------------
cdef class CoordSys:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """Constructor."""
    self.handle = None
    self.thisptr = NULL
    self.name = "spatialdata_geocoords_CoordSys"
    return


  def initialize(self):
    """Initialize the coordinate system."""
    # create shim for method 'initialize'
    #embed{ void CoordSys_initialize(void* pObj)
    ((spatialdata::geocoords::CoordSys*) pObj)->initialize();
    #}embed
    
    CoordSys_initialize(self.thisptr)
    return


  def _createHandle(self):
    """Wrap pointer to C++ object in PyCObject."""
    # create shim for destructor
    #embed{ void CoordSys_destructor(void* pObj)
    spatialdata::geocoords::CoordSys* pCS =
      (spatialdata::geocoords::CoordSys*) pObj;
    delete pCS;
    #}embed
    return PyCObject_FromVoidPtr(self.thisptr, CoordSys_destructor)


# ----------------------------------------------------------------------
cdef class CSCart(CoordSys):

  def __init__(self):
    """Constructor."""
    # create shim for constructor
    #embed{ void* CSCart_constructor()
      return (void*)(new spatialdata::geocoords::CSCart);
    #}embed

    CoordSys.__init__(self)
    self.thisptr = CSCart_constructor()
    self.handle = self._createHandle()
    return


  property toMeters:
    def __set__(self, scale):
      """Set scale factor for converting coordinates to SI units (meters)."""
      # create shim for method 'toMeters'
      #embed{ void CSCart_toMeters_set(void* pObj, double scale)
      ((spatialdata::geocoords::CSCart*) pObj)->toMeters(scale);
      #}embed
      CSCart_toMeters_set(self.thisptr, scale)

    def __get__(self):
      """Get scale factor for converting coordinates to SI units (meters)."""
      # create shim for method 'toMeters'
      #embed{ double CSCart_toMeters_get(void* pObj)
      return ((spatialdata::geocoords::CSCart*) pObj)->toMeters();
      #}embed
      return CSCart_toMeters_get(self.thisptr)


# ----------------------------------------------------------------------
cdef class CSGeo(CoordSys):

  def __init__(self):
    """Constructor."""
    # create shim for constructor
    #embed{ void* CSGeo_constructor()
      return (void*)(new spatialdata::geocoords::CSGeo);
    #}embed

    CoordSys.__init__(self)
    self.thisptr = CSGeo_constructor()
    self.handle = self._createHandle()
    return


  property ellipsoid:
    def __set__(self, name):
      """Set reference ellipsoid."""
      # create shim for method 'ellipsoid'
      #embed{ void CSGeo_ellipsoid_set(void* pObj, char* name)
        ((spatialdata::geocoords::CSGeo*) pObj)->ellipsoid(name);
      #}embed
      CSGeo_ellipsoid_set(self.thisptr, name)

    def __get__(self):
      """Fet reference ellipsoid."""
      # create shim for method 'ellipsoid'
      #embed{ char* CSGeo_ellipsoid_get(void* pObj)
        return (char*) ((spatialdata::geocoords::CSGeo*) pObj)->ellipsoid();
      #}embed
      return CSGeo_ellipsoid_get(self.thisptr)


  property datumHoriz:
    def __set__(self, name):
      """Set horizontal datum."""
      # create shim for method 'datumHoriz'
      #embed{ void CSGeo_datumHoriz_set(void* pObj, char* name)
      ((spatialdata::geocoords::CSGeo*) pObj)->datumHoriz(name);
      #}embed
      CSGeo_datumHoriz_set(self.thisptr, name)
      
    def __get__(self):
      """Get horizontal datum."""
      # create shim for method 'datumHoriz'
      #embed{ char* CSGeo_datumHoriz_get(void* pObj)
        return (char*) ((spatialdata::geocoords::CSGeo*) pObj)->datumHoriz();
      #}embed
      return CSGeo_datumHoriz_get(self.thisptr)


  property datumVert:
    def __set__(self, name):
      """Set vertical datum."""
      # create shim for method 'datumVert'
      #embed{ void CSGeo_datumVert_set(void* pObj, char* name)
        ((spatialdata::geocoords::CSGeo*) pObj)->datumVert(name);
      #}embed
      CSGeo_datumVert_set(self.thisptr, name)

    def __get__(self):
      """Get vertical datum."""
      # create shim for method 'datumVert'
      #embed{ char* CSGeo_datumVert_get(void* pObj)
        return (char*) ((spatialdata::geocoords::CSGeo*) pObj)->datumVert();
      #}embed
      return CSGeo_datumVert_get(self.thisptr)


  property isGeocentric:
    def __set__(self, flag):
      """Set geocentric flag."""
      # create shim for method 'isGeocentric'
      #embed{ void CSGeo_isGeocentric_set(void* pObj, int flag)
        ((spatialdata::geocoords::CSGeo*) pObj)->isGeocentric(flag);
      #}embed
      CSGeo_isGeocentric_set(self.thisptr, flag)

    def __get__(self):
      """Get geocentric flag."""
      # create shim for method 'isGeocentric'
      #embed{ int CSGeo_isGeocentric_get(void* pObj)
        return ((spatialdata::geocoords::CSGeo*) pObj)->isGeocentric();
      #}embed
      return CSGeo_isGeocentric_get(self.thisptr)
      

  property toMeters:
    def __set__(self, scale):
      """Set factor to convert Cartesian coordinates to meters."""
      # create shim for method 'toMeters'
      #embed{ void CSGeo_toMeters_set(void* pObj, double scale)
        ((spatialdata::geocoords::CSGeo*) pObj)->toMeters(scale);
      #}embed
      CSGeo_toMeters_set(self.thisptr, scale)

    def __get__(self):
      """Get factor to convert Cartesian coordinates to meters."""
      # create shim for method 'toMeters'
      #embed{ double CSGeo_toMeters_get(void* pObj)
        return ((spatialdata::geocoords::CSGeo*) pObj)->toMeters();
      #}embed
      return CSGeo_toMeters_get(self.thisptr)


# ----------------------------------------------------------------------
cdef class CSGeoLocalCart(CSGeo):

  def __init__(self):
    """Constructor."""
    # create shim for constructor
    #embed{ void* CSGeoLocalCart_constructor()
      return (void*)(new spatialdata::geocoords::CSGeoLocalCart);
    #}embed

    CSGeo.__init__(self)
    self.thisptr = CSGeoLocalCart_constructor()
    self.handle = self._createHandle()
    return


  def origin(self, lon, lat, elev):
    """Set origin of local cartesian coordinate system."""
    # create shim for method 'origin'
    #embed{ void CSGeoLocalCart_origin(void* pObj, double lon, double lat, double elev)
    ((spatialdata::geocoords::CSGeoLocalCart*) pObj)->origin(lon, lat, elev);
    #}embed
    CSGeoLocalCart_origin(self.thisptr, lon, lat, elev)


  def getOrigin(self):
    """Get origin of local cartesian coordinate system."""
    # create shim for method 'origin'
    #embed{ void CSGeoLocalCart_getOrigin(void* pObj, double* pLon, double* pLat, double* pElev)
    ((spatialdata::geocoords::CSGeoLocalCart*) pObj)->origin(pLon, pLat, pElev);
    #}embed
    cdef double lon, lat, elev
    CSGeoLocalCart_getOrigin(self.thisptr, &lon, &lat, &elev)
    return (lon, lat, elev)


# ----------------------------------------------------------------------
cdef class CSGeoProj(CSGeo):

  def __init__(self):
    """Constructor."""
    # create shim for constructor
    #embed{ void* CSGeoProj_constructor()
      return (void*)(new spatialdata::geocoords::CSGeoProj);
    #}embed

    CSGeo.__init__(self)
    self.thisptr = CSGeoProj_constructor()
    self.handle = self._createHandle()
    return


  property projector:
    def __set__(self, proj):
      """Set projector."""
      # create shim for method 'projector'
      #embed{ void CSGeoProj_projector(void* pObj, void* pProjObj)
      const spatialdata::geocoords::Projector* pProj =
        (spatialdata::geocoords::Projector*) pProjObj;
        ((spatialdata::geocoords::CSGeoProj*) pObj)->projector(*pProj);
      #}embed
      CSGeoProj_projector(self.thisptr, ptrFromHandle(proj))


# ----------------------------------------------------------------------
cdef class Projector:

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for type of object

  def __init__(self):
    """Constructor."""
    # create shim for constructor
    #embed{ void* Projector_constructor()
    return (void*)(new spatialdata::geocoords::Projector);
    #}embed

    self.thisptr = Projector_constructor()
    self.handle = self._createHandle()
    self.name = "spatialdata_geocoords_Projector"
    return


  property projection:
    def __set__(self, name):
      """Set projection."""
      # create shim for method 'projection'
      #embed{ void Projector_projection_set(void* pObj, char* name)
      ((spatialdata::geocoords::Projector*) pObj)->projection(name);
      #}embed
      Projector_projection_set(self.thisptr, name)

    def __get__(self):
      """Get projection."""
      # create shim for method 'projection'
      #embed{ char* Projector_projection_get(void* pObj)
        return (char*) ((spatialdata::geocoords::Projector*) pObj)->projection();
      #}embed
      return Projector_projection_get(self.thisptr)


  property units:
    def __set__(self, name):
      """Set units of projection."""
      # create shim for method 'units'
      #embed{ void Projector_units_set(void* pObj, char* name)
      ((spatialdata::geocoords::Projector*) pObj)->units(name);
      #}embed
      Projector_units_set(self.thisptr, name)

    def __get__(self):
      """Get units of projection."""
      # create shim for method 'units'
      #embed{ char* Projector_units_get(void* pObj)
        return (char*) ((spatialdata::geocoords::Projector*) pObj)->units();
      #}embed
      return Projector_units_get(self.thisptr)

  property projOptions:
    def __set__(self, options):
      """Set proj.4 options for projector."""
      # create shim for method 'projOptions'
      #embed{ void Projector_projOptions_set(void* pObj, char* options)
        ((spatialdata::geocoords::Projector*) pObj)->projOptions(options);
      #}embed
      Projector_projOptions_set(self.thisptr, options)

    def __get__(self):
      """Set proj.4 options for projector."""
      # create shim for method 'projOptions'
      #embed{ char* Projector_projOptions_get(void* pObj)
        return (char*) ((spatialdata::geocoords::Projector*) pObj)->projOptions();
      #}embed
      return Projector_projOptions_get(self.thisptr)


  def initialize(self, csGeo):
    """Initialize projector."""
    # create shim for method 'initialize'
    #embed{ void Projector_initialize(void* pObj, void* pCSObj)
    const spatialdata::geocoords::CoordSys* pCS =
      (spatialdata::geocoords::CoordSys*) pCSObj;
    const spatialdata::geocoords::CSGeo* pCSGeo =
      dynamic_cast<const spatialdata::geocoords::CSGeo*>(pCS);
    ((spatialdata::geocoords::Projector*) pObj)->initialize(*pCSGeo);
    #}embed

    if not csGeo.name == "spatialdata_geocoords_CoordSys":
      raise TypeError, \
            "Argument 'csGeo' must be extension module type 'CSGeo'."

    Projector_initialize(self.thisptr, ptrFromHandle(csGeo))
    return
  

  def project(self, lonlat):
    """Project geographic coordinates."""
    # create shim for method 'project'
    #embed{ void Projector_project(void* pObj, double* pX, double* pY, double lon, double lat)
    ((spatialdata::geocoords::Projector*) pObj)->project(pX, pY, lon, lat);
    #}embed

    cdef double x
    cdef double y
    npts = len(lonlat)
    xy = []
    for i from 0 <= i < npts:
      lon = lonlat[i][0]
      lat = lonlat[i][1]
      Projector_project(self.thisptr, &x, &y, lon, lat)
      xy.append([x, y])
    return xy
  

  def invproject(self, xy):
    """Get geographics coordinates for projected location."""
    # create shim for method 'invproject'
    #embed{ void Projector_invproject(void* pObj, double* pLon, double* pLat, double x, double y)
    ((spatialdata::geocoords::Projector*) pObj)->invproject(pLon, pLat, x, y);
    #}embed

    cdef double lon
    cdef double lat
    npts = len(xy)
    lonlat = []
    for i from 0 <= i < npts:
      x = xy[i][0]
      y = xy[i][1]
      Projector_invproject(self.thisptr, &lon, &lat, x, y)
      lonlat.append([lon, lat])
    return lonlat
  

  def _createHandle(self):
    """Wrap pointer to C++ object in PyCObject."""
    # create shim for destructor
    #embed{ void Projector_destructor(void* pObj)
    spatialdata::geocoords::Projector* pProj =
      (spatialdata::geocoords::Projector*) pObj;
    delete pProj;
    #}embed
    return PyCObject_FromVoidPtr(self.thisptr, Projector_destructor)


# ----------------------------------------------------------------------
# create shim for Converter method 'convert'
#embed{ void CppConverter_convert(double** ppCoords, int numLocs, void* pCSDestObj, void* pCSSrcObj, int is2D)
spatialdata::geocoords::CoordSys* pCSDest =
  (spatialdata::geocoords::CoordSys*) pCSDestObj;
spatialdata::geocoords::CoordSys* pCSSrc =
  (spatialdata::geocoords::CoordSys*) pCSSrcObj;
spatialdata::geocoords::Converter::convert(ppCoords, numLocs,
                                           pCSDest, pCSSrc, is2D);
#}embed

def Converter_convert(coordsSrc, csDest, csSrc):
  """Convert coordinates from source coordinate system 'csSrc' to
  destination coordinate system 'csDest'."""

  import spatialdata.utils.simplearray
  coordsSrc = spatialdata.utils.simplearray.objAsSimpleArray(coordsSrc)
  if not coordsSrc.isCompatible(nd=2,
                                simpletype="double",
                                writeable=True,
                                contiguous=True,
                                notswapped=True):
    raise TypeError, \
          "Argument 'coordsSrc' must be a contiguous, writeable, 2-D array " \
          "of type double."

  if not csDest.name == "spatialdata_geocoords_CoordSys":
    raise TypeError, \
          "Argument 'csDest' must be extension module type 'CSGeo'."
  if not csSrc.name == "spatialdata_geocoords_CoordSys":
    raise TypeError, \
          "Argument 'csSrc' must be extension module type 'CSGeo'."

  (numLocs, numCoords) = coordsSrc.shape
  is2D = 0
  if numCoords < 2 or numCoords > 3:
    raise TypeError, "Number of coordinates must be at 2 or 3."
  elif 2 == numCoords:
    is2D = 1

  cdef double* pVals
  pVals = <double*> PyCObject_AsVoidPtr(coordsSrc.data)

  CppConverter_convert(&pVals, numLocs,
                       ptrFromHandle(csDest), ptrFromHandle(csSrc),
                       is2D)
  return


# End of file 

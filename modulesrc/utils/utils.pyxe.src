#!/usr/bin/env python
#
# ======================================================================
#
#                           Brad T. Aagaard
#                        U.S. Geological Survey
#
# {LicenseText}
#
# ======================================================================

#header{
#include "spatialdata/utils/PointsStream.hh"

#include <stdexcept>
#include <Python.h>
#}header

# ----------------------------------------------------------------------
cdef extern from "Python.h":
  object PyCObject_FromVoidPtr(void*, void (*destruct)(void*))
  void* PyCObject_AsVoidPtr(object)

cdef void* ptrFromHandle(obj):
  """Extract pointer from PyCObject."""
  return PyCObject_AsVoidPtr(obj.handle)

cdef extern from "stdlib.h":
    ctypedef unsigned long size_t

# ----------------------------------------------------------------------
cdef class PointsStream:
  """
  Wrapper for C++ PointsStream object.
  """

  cdef void* thisptr # Pointer to C++ object
  cdef readonly object handle # PyCObject holding pointer to C++ object
  cdef readonly object name # Identifier for object base type

  def __init__(self):
    """
    Constructor.
    """
    # create shim for constructor
    #embed{ void* PointsStream_constructor()
      return (void*)(new spatialdata::utils::PointsStream);
    #}embed
    self.thisptr = PointsStream_constructor()
    self.handle = self._createHandle()
    self.name = "spatialdata_utils_PointsStream"
    return

  property filename:
    def __set__(self, filename):
      """
      Set name of file.
      """
      # create shim for method 'filename'
      #embed{ void PointsStream_filename_set(void* pObj, char* filename)
      try {
        ((spatialdata::utils::PointsStream*) pObj)->filename(filename);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      PointsStream_filename_set(self.thisptr, filename)

    def __get__(self):
      """
      Get name of file.
      """
      # create shim for method 'filename'
      #embed{ char* PointsStream_filename_get(void* pObj)
      char* name = 0;
      try {
        name = (char*) ((spatialdata::utils::PointsStream*) pObj)->filename();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return name;
      #}embed
      return PointsStream_filename_get(self.thisptr)


  property commentFlag:
    def __set__(self, flag):
      """
      Set flag for comment lines.
      """
      # create shim for method 'commentFlag'
      #embed{ void PointsStream_commentFlag_set(void* pObj, char* flag)
      try {
        ((spatialdata::utils::PointsStream*) pObj)->commentFlag(flag);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      PointsStream_commentFlag_set(self.thisptr, flag)

    def __get__(self):
      """
      Get flag for comment lines.
      """
      # create shim for method 'commentFlag'
      #embed{ char* PointsStream_commentFlag_get(void* pObj)
      char* name = 0;
      try {
        name = (char*) ((spatialdata::utils::PointsStream*) pObj)->commentFlag();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return name;
      #}embed
      return PointsStream_commentFlag_get(self.thisptr)


  property fieldWidth:
    def __set__(self, width):
      """
      Set field width.
      """
      # create shim for method 'fieldWidth'
      #embed{ void PointsStream_fieldWidth_set(void* pObj, int width)
      try {
        ((spatialdata::utils::PointsStream*) pObj)->fieldWidth(width);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      PointsStream_fieldWidth_set(self.thisptr, width)

    def __get__(self):
      """
      Get field width.
      """
      # create shim for method 'fieldWidth'
      #embed{ int PointsStream_fieldWidth_get(void* pObj)
      int width = 0;
      try {
        width = ((spatialdata::utils::PointsStream*) pObj)->fieldWidth();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      return PointsStream_fieldWidth_get(self.thisptr)


  property precision:
    def __set__(self, precision):
      """
      Set precision.
      """
      # create shim for method 'precision'
      #embed{ void PointsStream_precision_set(void* pObj, int precision)
      try {
        ((spatialdata::utils::PointsStream*) pObj)->precision(precision);
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      #}embed
      PointsStream_precision_set(self.thisptr, precision)

    def __get__(self):
      """
      Get flag for comment lines.
      """
      # create shim for method 'precision'
      #embed{ int PointsStream_precision_get(void* pObj)
      int precision = 0;
      try {
        precision = ((spatialdata::utils::PointsStream*) pObj)->precision();
      } catch (const std::exception& err) {
        PyErr_SetString(PyExc_RuntimeError,
                        const_cast<char*>(err.what()));
      } catch (...) {
        PyErr_SetString(PyExc_RuntimeError,
                        "Caught unknown C++ exception.");
      } // try/catch
      return precision;
      #}embed
      return PointsStream_precision_get(self.thisptr)


  def read(self):
    """
    Read points from stdin.
    """
    # create shim for method 'read'
    #embed{ void PointsStream_read(void* pObj, double** ppVals, int* pNumPts, int* pNumDims)
    try {
      ((spatialdata::utils::PointsStream*) pObj)->read(ppVals,
                                                       pNumPts, pNumDims);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    cdef double* pVals
    cdef int numPts
    cdef int numDims
    pVals = NULL
    numPts = 0
    numDims = 0
    PointsStream_read(self.thisptr, &pVals, &numPts, &numDims)
    dims = [numPts, numDims]
    import spatialdata.utils.simplearray
    pValsObj = PyCObject_FromVoidPtr(pVals, NULL);
    return spatialdata.utils.simplearray.SimpleCppArray(pValsObj,
                                                        dims, "double")


  def write(self, points):
    """
    Write points to stdout.
    """
    # create shim for method 'write'
    #embed{ void PointsStream_write(void* pObj, double* pVals, int numPts, int numDims)
    try {
      ((spatialdata::utils::PointsStream*) pObj)->write(pVals, numPts, numDims);
    } catch (const std::exception& err) {
      PyErr_SetString(PyExc_RuntimeError,
                      const_cast<char*>(err.what()));
    } catch (...) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Caught unknown C++ exception.");
    } // try/catch
    #}embed
    
    import spatialdata.utils.simplearray
    points = spatialdata.utils.simplearray.objAsSimpleArray(points)
    if not points.isCompatible(nd=2,
                               simpletype="double",
                               contiguous=True,
                               notswapped=True):
      raise TypeError, \
            "Argument 'points' must be a contiguous, 2-D array of type double."
    
    (numPts, numDims) = points.shape
    cdef double* pVals
    pVals = <double*> PyCObject_AsVoidPtr(points.data)
    PointsStream_write(self.thisptr, pVals, numPts, numDims)
    return
      

  def _createHandle(self):
    """Wrap pointer to C++ object in PyCObject."""
    # create shim for destructor
    #embed{ void PointsStream_destructor(void* pObj)
    spatialdata::utils::PointsStream* pStream =
      (spatialdata::utils::PointsStream*) pObj;
    delete pStream;
    #}embed
    return PyCObject_FromVoidPtr(self.thisptr, PointsStream_destructor)


# End of file

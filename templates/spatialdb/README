Overview

  This directory contains source files for building a user defined
  spatial database component consisting of C++ code, a Python module,
  and Python code. The example implementation provides a uniform
  seismic velocity model than can be used to provide elastic physical
  properties in PyLith simulations using a georeferenced coordinate
  system.

  The suggested path to customizing this component is to build and
  install the provided UniformVelModel component and then rename/copy
  the files and gradually adopt it to your specific needs.

Requirements

  In order to build the component and interface it with PyLith, you will need
    * C++ compiler
    * SWIG (version 1.3.33 or later)
    * Python with header files (version 2.3 or later)
    * autoconf tools

  The C++ compiler must be compatible with the installed Python and
  both must be compatible with the C++ compiler and Python used to
  build PyLith. The safest way to insure compatibility is to use the
  C++ compiler and Python provided with your operating system and
  build PyLith from source. However, on many systems it should be
  possible to build the component and have it work with PyLith
  installed from a binary package.

Files

  Makefile.am - automake parameters for constructing a Makefile
  README - this file
  UniformVelModel.cc - C++ source file implementing UniformVelModel object functions
  UniformVelModel.hh - C++ header file with class definition for UniformVelModel
  UniformVelModel.i - SWIG interface file for the C++ UniformVelModel object
  __init__.py - Python source file for module initialization
  configure.ac - autoconf parameters for construction a configure script
  m4 - directory containing autoconf macros
  spatialdbcontrib.i - SWIG interface file defining the spatialdbcontrib Python module
  tests - directory containing tests of the UniformVelModel object

How to build/install the UniformVelModel component

  1. Run "autoreconf -if" in this directory (templates/spatialdb).

  2. Run configure either from this directory or a scratch build
  directory. Use the --prefix=DIRECTORY to indicate where the files
  should be installed. We strongly recommend that you install the
  component to the same location as where PyLith is installed. For
  example, if PyLith is installed in $HOME/cig then use the
  --prefix=$HOME/cig command line argument to configure. To build in a
  separate directory simply invoke the configure script from the other
  directory. For example, from $HOME/build/spatialdb-contrib run
  $HOME/src/spatialdata/templates/spatialdb/configure --prefix=$HOME/cig.

  Configure will check for a number of files including the location of
  spatialdata C++ header files, library, and SWIG interface files. You
  may need to define some additional command line arguments to
  configure and/or environment variables to help configure find the
  required files.

  We run configure using on a MacBook Pro using MacPorts where we have
  defined a number of environment variables in .bashrc for installed
  tools.

  ${HOME}/src/cig/spatialdata/templates/spatialdb/configure  --config-cache  \
    --prefix=${HOME}/tools/cig/gcc-4.0  \
    CPPFLAGS="-I${PROJ4_INCDIR} -I${PORTS_INCDIR} -I${CIG_INCDIR}"  \
    LDFLAGS="-L${PROJ4_LIBDIR} -L${PORTS_LIBDIR} -L${CIG_LIBDIR} -F${PORTS_DIR}/Library/Frameworks"  \
    SPATIALDATA_SWIG_DIR="${CIG_DIR}/share/spatialdata/swig" CC=gcc CXX=g++

  3. Run "make", "make install", and "make check" from the top-level
  build directory. This will first build the C++ library and module,
  then install the files to the location specified by the --prefix
  command line argument to configure, and finally run some Python
  tests to verify that the UniformVelModel component was installed
  correctly.

Customization

  This is where the fun begins. Read over the Python and C++ source
  code to become familiar with the features implemented with the
  UniformVelModel component. The UniformVelModel Python object simply
  acquires user input using Pyre properties (and could use facilities
  as well) and in _configure() transfers that information to the
  UniformVelModel C++ object via the SWIG module in. The
  UniformVelModel C++ object does the grunt work of managing which
  values will be returned in a query and performing the query
  itself. In this case, the query is trivial (it simply returns the
  same value independent of the location where the physical properties
  are desired). In a real UniformVelModel component, the query
  function can be quite complex and will usually involve interpolation
  of values to the location specified in the arguments of the query()
  function (the query location).

  We recommend that you start by changing the default values assigned
  to the UniformVelModel, followed by changing the user controlled
  parameters (Pyre properties). When you change the Pyre properties
  (vp, vs, density) you should change the corresponding names of the
  C++ accessor functions (vp, vs, density).

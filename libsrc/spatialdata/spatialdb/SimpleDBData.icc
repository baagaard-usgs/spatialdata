// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
// Brad T. Aagaard, U.S. Geological Survey
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2022 University of California, Davis
//
// See LICENSE.md for license information.
//
// ----------------------------------------------------------------------
//

#if !defined(spatialdata_spatialdb_simpledbdata_hh)
#error "SimpleDBData.icc must only be included from SimpleDBData.hh"
#endif

#include <cassert> // USES assert()

// Get number of locations for data.
inline
size_t
spatialdata::spatialdb::SimpleDBData::getNumLocs(void) const {
    return _numLocs;
}


// Get number of values for data.
inline
size_t
spatialdata::spatialdb::SimpleDBData::getNumValues(void) const {
    return _numValues;
}


// Get spatial dimension of data distribution.
inline
size_t
spatialdata::spatialdb::SimpleDBData::getDataDim(void) const {
    return _dataDim;
}


// Get spatial dimension of locations.
inline
size_t
spatialdata::spatialdb::SimpleDBData::getSpaceDim(void) const {
    return _spaceDim;
}


// Get coordinates of location in database.
inline
const double*
spatialdata::spatialdb::SimpleDBData::getCoordinates(const size_t index) const {
    assert(index >= 0 && index < _numLocs);
    return &_coordinates[index*_spaceDim];
}


// Get coordinates of location in database.
inline
double*
spatialdata::spatialdb::SimpleDBData::getCoordinates(const size_t index) {
    assert(index >= 0 && index < _numLocs);
    return &_coordinates[index*_spaceDim];
}


// Get data values at location in database.
inline
const double*
spatialdata::spatialdb::SimpleDBData::getData(const size_t index) const {
    assert(index >= 0 && index < _numLocs);
    return &_data[index*_numValues];
}


// Get data values at location in database.
inline
double*
spatialdata::spatialdb::SimpleDBData::getData(const size_t index) {
    assert(index >= 0 && index < _numLocs);
    return &_data[index*_numValues];
}


// Get name of value.
inline
const char*
spatialdata::spatialdb::SimpleDBData::getName(const size_t index) const {
    assert(index >= 0 && index < _numValues);
    return _names[index].c_str();
}


// Get units of value.
inline
const char*
spatialdata::spatialdb::SimpleDBData::getUnits(const size_t index) const {
    assert(index >= 0 && index < _numValues);
    return _units[index].c_str();
}


// End of file

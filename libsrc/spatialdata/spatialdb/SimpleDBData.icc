// -*- C++ -*-
//
// ----------------------------------------------------------------------
//
// Brad T. Aagaard, U.S. Geological Survey
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2017 University of California, Davis
//
// See COPYING for license information.
//
// ----------------------------------------------------------------------
//

#if !defined(spatialdata_spatialdb_simpledbdata_hh)
#error "SimpleDBData.icc must only be included from SimpleDBData.hh"
#endif

#include <cassert> // USES assert()

// Get number of locations for data.
inline
int
spatialdata::spatialdb::SimpleDBData::numLocs(void) const {
  return _numLocs;
}

// Get number of values for data.
inline
int
spatialdata::spatialdb::SimpleDBData::numValues(void) const {
  return _numValues;
}

// Get spatial dimension of data distribution.
inline
int
spatialdata::spatialdb::SimpleDBData::dataDim(void) const {
  return _dataDim;
}

// Get spatial dimension of locations.
inline
int
spatialdata::spatialdb::SimpleDBData::spaceDim(void) const {
  return _spaceDim;
}

// Get coordinates of location in database.
inline
const double*
spatialdata::spatialdb::SimpleDBData::coordinates(const int index) const {
  assert(index >= 0 && index < _numLocs);
  return &_coordinates[index*_spaceDim];
}

// Get coordinates of location in database.
inline
double*
spatialdata::spatialdb::SimpleDBData::coordinates(const int index) {
  assert(index >= 0 && index < _numLocs);
  return &_coordinates[index*_spaceDim];
}

// Get data values at location in database.
inline
const double*
spatialdata::spatialdb::SimpleDBData::data(const int index) const {
  assert(index >= 0 && index < _numLocs);
  return &_data[index*_numValues];
}

// Get data values at location in database.
inline
double*
spatialdata::spatialdb::SimpleDBData::data(const int index) {
  assert(index >= 0 && index < _numLocs);
  return &_data[index*_numValues];
}

// Get name of value.
inline
const char*
spatialdata::spatialdb::SimpleDBData::name(const int index) const {
  assert(index >= 0 && index < _numValues);
  return _names[index].c_str();
}
    
// Get units of value.
inline
const char*
spatialdata::spatialdb::SimpleDBData::units(const int index) const {
  assert(index >= 0 && index < _numValues);
  return _units[index].c_str();
}


// End of file 

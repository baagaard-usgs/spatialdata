// -*- C++ -*-
//
// ======================================================================
//
//                           Brad T. Aagaard
//                        U.S. Geological Survey
//
// {LicenseText}
//
// ======================================================================
//

#if !defined(spatialdata_geocoords_coordsysgeo_h)
#error "CoordSysGeo.icc must only be included from CoordSysGeo.h"
#endif

// Set reference ellipsoid.
inline
void
spatialdata::geocoords::CoordSysGeo::ellipsoid(const std::string& name)
{ _ellipsoid = name; }

// Get reference ellipsoid.
inline
const char*
spatialdata::geocoords::CoordSysGeo::ellipsoid(void) const
{ return _ellipsoid.c_str(); }

// Set horizontal datum.
inline
void 
spatialdata::geocoords::CoordSysGeo::datumHoriz(const std::string& name)
{ _datumHoriz = name; }

// Get horizontal datum.
inline
const char*
spatialdata::geocoords::CoordSysGeo::datumHoriz(void) const
{ return _datumHoriz.c_str(); }

// Set vertical datum.
inline
void 
spatialdata::geocoords::CoordSysGeo::datumVert(const std::string& name)
{ _datumVert = name; }

// Get vertical datum.
inline
const char*
spatialdata::geocoords::CoordSysGeo::datumVert(void) const
{ return _datumVert.c_str(); }

// Set geocentric flag.
inline
void
spatialdata::geocoords::CoordSysGeo::isGeocentric(bool geocentric)
{ _isGeocentric = geocentric; }

// Get geocentric flag.
inline
bool
spatialdata::geocoords::CoordSysGeo::isGeocentric(void) const
{ return _isGeocentric; }

// Set factor to convert elevation to meters.
inline
void
spatialdata::geocoords::CoordSysGeo::elevToMeters(const double factor)
{ _elevToMeters = factor; }

// Get factor to convert elevation to meters.
inline
double
spatialdata::geocoords::CoordSysGeo::elevToMeters(void) const
{ return _elevToMeters; }

// Get proj form vertical datum.
inline
const char*
spatialdata::geocoords::CoordSysGeo::projDatumVert(void) const
{ return _datumVert.c_str(); }

// version
// $Id$

// End of file 

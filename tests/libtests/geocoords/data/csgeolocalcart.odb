#!/usr/bin/env python
#
# ======================================================================
#
# Brad T. Aagaard, U.S. Geological Survey
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010 University of California, Davis
#
# See COPYING for license information.
#
# ======================================================================
#
## @file geocoords/tests/libtests/data/coordsyslocal.odb
## @brief Python data generator for testing of CoordSysLocal.

from Numeric import ravel

def data():
  """Factory method for facility quaddata."""
  return CoordSysLocal()

from ConvertData import ConvertData

# CoordSysLocal class
class CoordSysLocal(ConvertData):
  """Python data generator for testing of CoordSysLocal."""


  def calculate(self):
    """Calculate original and converted coordinates."""

    self.ellipsoid = "clrk66"
    self.datumHoriz = "NAD27"
    self.datumVert = "mean sea level"

    self.originLLENAD27 = [-100.0, 39.0, 0.01]
    self.originGeoidHt = -26.2262952997


    self.lonlatNAD27Elev = [ [-115.000000,  39.00000, 12.0],
                             [-120.342532,  43.23423, 4.7],
                             [-121.342532,  45.23423, 13.4],
                             [-115.342532,  36.23423, 7.34],
                             [-110.342532,  39.23423, 65.3],
                             [-107.342532,  33.23423, 2.3] ]
    self.geoidHt = [ -20.9472070802,
                     -19.323765177,
                     -20.1157110649,
                     -27.3792312799,
                     -18.6295580482,
                     -23.7238990803]

    self.lonlatNAD27Geoid = []
    for i in range(len(self.lonlatNAD27Elev)):
      lon = self.lonlatNAD27Elev[i][0]
      lat = self.lonlatNAD27Elev[i][1]
      elevAdj = self.lonlatNAD27Elev[i][2] + self.geoidHt[i]
      self.lonlatNAD27Geoid.append([lon, lat, elevAdj]) 

    self._calcOriginInfo(self.originLLENAD27, self.originGeoidHt)

    # convert NAD27 to WGS84
    self._command = "cs2cs " \
                    "+proj=latlong +datum=NAD27 +ellps=clrk66 " \
                    "+to +proj=latlong +datum=WGS84 +ellps=WGS84 " \
                    "-f %.12f"
    self.lonlatWGS84Elev = self._convert(self.lonlatNAD27Elev)

    # convert NAD27 to WGS84 (geoid)
    self._command = "cs2cs " \
                    "+proj=latlong +datum=NAD27 +ellps=clrk66 " \
                    "+to +proj=latlong +datum=WGS84 +ellps=WGS84 " \
                    "-f %.12f"
    self.lonlatWGS84Geoid = self._convert(self.lonlatNAD27Geoid)

    # convert NAD27 to ECEF
    self._command = "cs2cs " \
                    "+proj=latlong +datum=NAD27 +ellps=clrk66 " \
                    "+to +proj=geocent +datum=WGS84 +ellps=WGS84 " \
                    "-f %.12f"
    self.xyzECEF = self._convert(self.lonlatNAD27Geoid)

    # convert NAD27 to local
    self.xyzLocal = self._xyzECEFToLocal(self.xyzECEF)

    return


  def dump(self, dumper):
    """Dump data."""
    dumper.open(self.name)

    dumper.writeVal("char*", "_ELLIPSOID", self.ellipsoid, "\"%s\"")
    dumper.writeVal("char*", "_DATUMHORIZ", self.datumHoriz, "\"%s\"")
    dumper.writeVal("char*", "_DATUMVERT", self.datumVert, "\"%s\"")

    dumper.writeVal("double", "_ORIGINLON", self.originLLENAD27[0], "%20.12e")
    dumper.writeVal("double", "_ORIGINLAT", self.originLLENAD27[1], "%20.12e")
    dumper.writeVal("double", "_ORIGINELEV", self.originLLENAD27[2], "%20.12e")
    dumper.writeVal("double", "_ORIGINX", self.originXYZ[0], "%20.12e")
    dumper.writeVal("double", "_ORIGINY", self.originXYZ[1], "%20.12e")
    dumper.writeVal("double", "_ORIGINZ", self.originXYZ[2], "%20.12e")

    dumper.writeVal("int", "_NUMLOCS", len(self.lonlatNAD27Elev), "%d")
    dumper.writeArray("double", "_XYZECEF", ravel(self.xyzECEF),
                      "%20.12e,", 3)
    dumper.writeArray("double", "_XYZLOCAL", ravel(self.xyzLocal),
                      "%20.12e,", 3)
    dumper.close()
    return

  def __init__(self):
    """Constructor."""
    ConvertData.__init__(self, name='coordsyslocal')
    self._fileSrc = "src.dat"
    self._fileDest = "dest.dat"
    return


  def _calcOriginInfo(self, originLLENAD27, geoidHt):

    # convert origin WGS84
    self._command = "cs2cs " \
                    "+proj=latlong +datum=NAD27 +ellps=clrk66 " \
                    "+to +proj=latlong +datum=WGS84 +ellps=WGS84 " \
                    "-f %.12f"
    coords = self._convert([originLLENAD27])
    coords[0][2] += geoidHt

    # save longitude in WGS84
    lonWGS84 = coords[0][0]
    
    # create point 25km above origin to find normal to Earth's surface
    coords.append([coords[0][0], coords[0][1], coords[0][2]])
    coords[1][2] += 25e+3
    self._command = "cs2cs " \
                    "+proj=latlong +datum=WGS84 +ellps=WGS84 " \
                    "+to +proj=geocent +datum=WGS84 +ellps=WGS84 " \
                    "-f %.12f"
    coords = self._convert(coords)

    # Get unit vector for local x direction
    # local x direction is in ECEF xy plane,
    # parallel to lines of equal latitude
    from math import cos, sin, pi
    lonR = lonWGS84 * pi / 180.0
    originXDir = [-sin(lonR), cos(lonR), 0.0]

    # Get unit vector for z direction
    # local z direction is normal to Earth's surface at origin
    # Use point 25km above origin to find normal to Earth's surface at
    # origin, make it a unit vector
    p1 = coords[1]
    p0 = coords[0]
    dx = p1[0]-p0[0]
    dy = p1[1]-p0[1]
    dz = p1[2]-p0[2]
    mag = (dx**2 + dy**2 + dz**2)**0.5
    originZDir = [dx/mag, dy/mag, dz/mag]

    # Get unit vector for y direction
    # local y direction is cross product of z and x
    originYDir = [originZDir[1]*originXDir[2] - originXDir[1]*originZDir[2],
                  originZDir[2]*originXDir[0] - originXDir[2]*originZDir[0],
                  originZDir[0]*originXDir[1] - originXDir[0]*originZDir[1]]

    self.orientation = [originXDir, originYDir, originZDir]

    self.originXYZ = [0.0, 0.0, 0.0]
    coords = self._xyzECEFToLocal(coords)
    self.originXYZ = coords[0]

    #print self.orientation
    #print self.originXYZ

    return


  def _xyzECEFToLocal(self, xyzECEF):
    xyzLocal = []

    for xyz in xyzECEF:
      xOld = xyz[0]
      yOld = xyz[1]
      zOld = xyz[2]

      dirs = self.orientation
      origin = self.originXYZ

      xNew = dirs[0][0]*xOld + dirs[0][1]*yOld +dirs[0][2]*zOld - origin[0]
      yNew = dirs[1][0]*xOld + dirs[1][1]*yOld +dirs[1][2]*zOld - origin[1]
      zNew = dirs[2][0]*xOld + dirs[2][1]*yOld +dirs[2][2]*zOld - origin[2]

      xyzLocal.append([xNew, yNew, zNew])
    return xyzLocal


# version
__id__ = "$Id$"

# End of file 

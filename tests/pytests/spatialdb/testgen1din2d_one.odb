#!/usr/bin/env python
#
# ======================================================================
#
# Brad T. Aagaard, U.S. Geological Survey
#
# This code was developed as part of the Computational Infrastructure
# for Geodynamics (http://geodynamics.org).
#
# Copyright (c) 2010-2017 University of California, Davis
#
# See COPYING for license information.
#
# ======================================================================
#

from pyre.components.Component import Component

# ----------------------------------------------------------------------
# OneShapers class
from spatialdata.spatialdb.generator.Shapers import Shapers
class OneShapers(Shapers):
  """
  Python object acting as Shapers component for value 'one' in testing
  GenSimpleDBApp.
  """

  # INVENTORY //////////////////////////////////////////////////////////

  class Inventory(Component.Inventory):
    """
    Python object for managing Shapers facilities and properties.
    """

    ## @class Inventory
    ## Python object for managing Shaper facilities and properties.
    ##
    ## \b Properties
    ## @li None
    ##
    ## \b Facilities
    ## @li \b bg Background shaper
    ## @li \b add Addition shaper
    ## @li \b multiply Multiplication shaper

    import pyre.inventory

    from spatialdata.spatialdb.generator.Shaper import Shaper

    bg = pyre.inventory.facility("bg", factory=Shaper)
    bg.meta['tip'] = "Background shaper."

    add = pyre.inventory.facility("add", factory=Shaper)
    add.meta['tip'] = "Addition shaper."
    
    multiply = pyre.inventory.facility("multiply", factory=Shaper)
    multiply.meta['tip'] = "Addition shaper."
    

  # PUBLIC METHODS /////////////////////////////////////////////////////

  def __init__(self):
    """
    Constructor.
    """
    Shapers.__init__(self, name="oneshapers")
    return


  # PRIVATE METHODS ////////////////////////////////////////////////////

  def _configure(self):
    """
    Setup members based on inventory.
    """
    Shapers._configure(self)
    self.shapers = [self.inventory.bg,
                    self.inventory.add,
                    self.inventory.multiply]
    return


# ======================================================================
# Factories

def shapers():
  """
  Factory for shapers.
  """
  return OneShapers()


# End of file
